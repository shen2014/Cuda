# -*- coding: utf-8 -*-


from numba import cuda

from numba.cuda.random import create_xoroshiro128p_states,  xoroshiro128p_normal_float32, xoroshiro128p_normal_float64




def standard_gaussian_rv_generator(num_sim, dtype_, seed_ = 1):

	threads_per_block = 1
			
	blocks            = num_sim
	
	rng_states        = create_xoroshiro128p_states(num_sim, seed = seed_)
	
	rv                = cuda.device_array(shape = (num_sim,), dtype = dtype_)
	
	if dtype_ == 'float64':
	
		gaussian_generator_float64[blocks, threads_per_block](rng_states, rv) 
		
	elif dtype_ == 'float32':

		gaussian_generator_float32[blocks, threads_per_block](rng_states, rv)		
	
	else:
		raise ValueError('unknown float data type')
		
	return rv	
		
@cuda.jit
def gaussian_generator_float64(rng_states, rv):
	
	thread_id = cuda.threadIdx.x + cuda.blockIdx.x * cuda.blockDim.x
	
	
	N = len(rv)
	
	if thread_id < N:
	
		rv[thread_id] = xoroshiro128p_normal_float64(rng_states, thread_id)
			

@cuda.jit
def gaussian_generator_float32(rng_states, rv):
	
	thread_id = cuda.threadIdx.x + cuda.blockIdx.x * cuda.blockDim.x
	
	N = len(rv)
	
	if thread_id < N:
	
		rv[thread_id] = xoroshiro128p_normal_float32(rng_states, thread_id)			
			
			
if __name__ == '__main__':

	import numpy as np
	
	import matplotlib.pyplot as plt
	
	from   scipy.stats import gaussian_kde, norm
	
	
	
	N       = 1000000
	d_ary   = standard_gaussian_rv_generator(N, 'float64')	
		
	ary = np.empty(shape=d_ary.shape, dtype=d_ary.dtype)
	d_ary.copy_to_host(ary)		
			
	kernel = gaussian_kde(ary)
	
	x = np.linspace(norm.ppf(0.01), norm.ppf(0.99), 100)
	
	fig, ax = plt.subplots(1, 1)
	
	ax.plot(x, norm.pdf(x), 'r-',   lw = 5, alpha = 0.6, label = 'norm pdf')
	
	ax.plot(x, kernel.pdf(x), 'k-', lw = 2, label = 'kernel estimated pdf of gpu simulation')
	
	ax.legend(loc = 'best')
	
	plt.show()
	
	
